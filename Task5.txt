import numpy as np
import pandas as pd
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Dropout, GlobalAveragePooling2D
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.applications import MobileNetV2
from sklearn.model_selection import train_test_split

# Parameters
IMG_SIZE = 224  # Image size for MobileNetV2
BATCH_SIZE = 32
DATA_DIR = "path/to/food_dataset"  # Path to dataset
CALORIE_DATA = {
    "Pizza": 285,
    "Burger": 354,
    "Salad": 152,
    "Apple": 95,
    "Banana": 105
}  # Example calorie mapping

# Data Augmentation and Preprocessing
data_gen = ImageDataGenerator(
    rescale=1.0 / 255,
    rotation_range=20,
    width_shift_range=0.2,
    height_shift_range=0.2,
    horizontal_flip=True,
    validation_split=0.2
)

# Load training and validation datasets
train_data = data_gen.flow_from_directory(
    DATA_DIR,
    target_size=(IMG_SIZE, IMG_SIZE),
    batch_size=BATCH_SIZE,
    class_mode='categorical',
    subset='training'
)

val_data = data_gen.flow_from_directory(
    DATA_DIR,
    target_size=(IMG_SIZE, IMG_SIZE),
    batch_size=BATCH_SIZE,
    class_mode='categorical',
    subset='validation'
)

# Load MobileNetV2 as base model
base_model = MobileNetV2(weights='imagenet', include_top=False, input_shape=(IMG_SIZE, IMG_SIZE, 3))
base_model.trainable = False  # Freeze base model layers

# Build the model
model = Sequential([
    base_model,
    GlobalAveragePooling2D(),
    Dropout(0.2),
    Dense(train_data.num_classes, activation='softmax')
])

# Compile the model
model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

# Train the model
print("Training the model...")
history = model.fit(
    train_data,
    validation_data=val_data,
    epochs=10
)

# Save the model
model.save("food_recognition_model.h5")
print("Model saved as food_recognition_model.h5")

# Calorie Estimation Function
def estimate_calories(image_path):
    """Predict food item and estimate calories."""
    img = tf.keras.preprocessing.image.load_img(image_path, target_size=(IMG_SIZE, IMG_SIZE))
    img_array = tf.keras.preprocessing.image.img_to_array(img) / 255.0
    img_array = np.expand_dims(img_array, axis=0)

    # Predict class
    predictions = model.predict(img_array)
    class_idx = np.argmax(predictions)
    class_label = list(train_data.class_indices.keys())[class_idx]

    # Get calories
    calories = CALORIE_DATA.get(class_label, "Unknown")
    return class_label, calories

# Example Usage
image_path = "path/to/test_image.jpg"
predicted_food, calories = estimate_calories(image_path)
print(f"Predicted Food: {predicted_food}, Estimated Calories: {calories}")
